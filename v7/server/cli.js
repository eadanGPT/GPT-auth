import db from './db.js';
const [, , cmd, ...args] = process.argv;
function out(x){ console.log(JSON.stringify(x,null,2)); }
await db.init();
const [ns, sub] = (cmd||'').split(':');
if(ns==='Keys'){ if(sub==='addKey'){ const key=args[0]; const hash=db.addKey(key); out({added:true,keyhash:hash}); process.exit(0);} if(sub==='addKeys'){ const n=parseInt(args[0]||'0',10); const list=[]; for(let i=0;i<n;i++){ const k='key-'+Math.random().toString(36).slice(2); list.push({k,hash:db.addKey(k)}); } out(list); process.exit(0);} if(sub==='listKeys'){ out(db.listKeys()); process.exit(0);} if(sub==='unusedKeys'){ out(db.unusedKeys()); process.exit(0);} if(sub==='removeKey'){ db.removeKey(args[0]); out({removed:true}); process.exit(0);} if(sub==='blacklistKey'){ db.blacklistKey(args[0]); out({blacklisted:true}); process.exit(0);} if(sub==='find'){ const k=args[0]; out(db.db.prepare('SELECT * FROM keys WHERE keyhash=?').get(k)||{}); process.exit(0);} }
if(ns==='Users'){ if(sub==='ban'){ const user=args[0], mins=parseInt(args[1]||'60',10); const until=Date.now()+mins*60000; db.db.prepare('INSERT OR REPLACE INTO users (keyhash,banned_until) VALUES (?,?)').run(user,until); out({banned:true,until}); process.exit(0);} if(sub==='unban'){ const user=args[0]; db.db.prepare('UPDATE users SET banned_until=0 WHERE keyhash=?').run(user); out({unbanned:true}); process.exit(0);} if(sub==='stats'){ const user=args[0]; const g=db.db.prepare('SELECT * FROM analytics_global WHERE keyhash=?').get(user); const s=db.db.prepare('SELECT COUNT(*) n FROM sessions WHERE keyhash=?').get(user); out({global:g||{},sessions:s.n}); process.exit(0);} }
if(ns==='ActiveSessions'){ if(sub==='list'){ const rows=db.db.prepare('SELECT * FROM sessions WHERE disconnected_at IS NULL').all(); out(rows); process.exit(0);} if(sub==='find'){ const x=args[0]; const rows=db.db.prepare('SELECT * FROM sessions WHERE id=? OR keyhash=?').all(x,x); out(rows); process.exit(0);} }
if(ns==='Logs'){ if(sub==='logs'){ const kind=args[0]||'%'; const rows=db.db.prepare('SELECT * FROM logs WHERE kind LIKE ? ORDER BY ts DESC LIMIT 200').all(kind); out(rows); process.exit(0);} }
if(ns==='Settings'){ if(sub==='allowConnections'){ db.setSetting('allowConnections', args[0]); out({ok:true}); process.exit(0);} if(sub==='maxConnections'){ db.setSetting('maxConnections', parseInt(args[0]||'100',10)); out({ok:true}); process.exit(0);} }
console.log('Unknown command'); process.exit(1);
